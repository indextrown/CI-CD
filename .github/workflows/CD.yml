#name: Deploy to TestFlight
#
#on:
#  push:
#    branches: [ "release" ]  # release 브랜치에 push될 때 실행
#
#jobs:
#  deploy:
#    runs-on: macos-latest    # 최신 macOS 환경에서 실행
#
#    steps:
#      # 리포지토리 코드를 체크아웃
#      - uses: actions/checkout@v4
#
#      # 지정한 Xcode 버전으로 환경 설정
#      - name: Setup Xcode
#        uses: maxim-lobanov/setup-xcode@v1
#        with:
#          xcode-version: "16.1.0"
#
#      # 앱 아카이브 단계: 프로젝트를 클린 후 아카이브 생성
#      - name: Archive App
#        run: |
#          mkdir -p build
#          xcodebuild clean archive \
#            -project CI-CD.xcodeproj \
#            -scheme CI-CD \
#            -archivePath build/CI-CD.xcarchive \
#            -destination "generic/platform=iOS"
#            -allowProvisioningUpdates
#
#      # IPA 내보내기 단계: 아카이브된 앱을 IPA 파일로 내보냄
#      - name: Export IPA
#        run: |
#          xcodebuild -exportArchive \
#            -archivePath build/CI-CD.xcarchive \
#            -exportPath build/CI-CD \
#            -exportOptionsPlist ExportOptions.plist
#
#      # TestFlight 업로드 단계: xcrun altool을 사용하여 IPA 파일을 TestFlight로 업로드
#      - name: Upload to TestFlight
#        run: |
#          xcrun altool --upload-app -f build/CI-CD/CI-CD.ipa -t ios \
#            --apiKey "$APP_STORE_CONNECT_API_KEY" --apiIssuer "$APP_STORE_CONNECT_API_ISSUER"
#        env:
#          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
#          APP_STORE_CONNECT_API_ISSUER: ${{ secrets.APP_STORE_CONNECT_API_ISSUER }}
#

name: Deploy to TestFlight

on:
  push:
    branches: [ "release" ]  # release 브랜치에 push될 때 실행

jobs:
  deploy:
    runs-on: macos-latest

    steps:
      # 리포지토리 체크아웃
      - uses: actions/checkout@v4

      # 인증서(p12) 가져오기: GitHub Secrets에 Base64 인코딩된 인증서 파일을 복원 후, 시스템에 추가
      - name: Import Certificate
        run: |
          echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
          security import certificate.p12 -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        env:
          CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      # 프로비저닝 프로파일 설치: GitHub Secrets에 Base64 인코딩된 provisioning profile을 복원 후, Xcode가 인식할 경로에 복사
      - name: Install Provisioning Profile
        run: |
          echo "$PROVISIONING_PROFILE" | base64 --decode > provisioning.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp provisioning.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        env:
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}

      # Xcode 설정: 원하는 Xcode 버전으로 환경 구성
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.1.0"

      # 앱 아카이브: 프로젝트를 클린 후 아카이브 생성
      - name: Archive App
        run: |
          mkdir -p build
          xcodebuild clean archive \
            -project CI-CD.xcodeproj \
            -scheme CI-CD \
            -archivePath build/CI-CD.xcarchive \
            -destination "generic/platform=iOS"
      
      # IPA 내보내기: 아카이브된 앱을 IPA 파일로 내보내기 (ExportOptions.plist 파일은 미리 설정되어 있어야 함)
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath build/CI-CD.xcarchive \
            -exportPath build/CI-CD \
            -exportOptionsPlist ExportOptions.plist

      # TestFlight 업로드: xcrun altool을 사용해 IPA 파일을 TestFlight에 업로드
      - name: Upload to TestFlight
        run: |
          xcrun altool --upload-app -f build/CI-CD/CI-CD.ipa -t ios \
            --apiKey "$APP_STORE_CONNECT_API_KEY" --apiIssuer "$APP_STORE_CONNECT_API_ISSUER"
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APP_STORE_CONNECT_API_ISSUER: ${{ secrets.APP_STORE_CONNECT_API_ISSUER }}
